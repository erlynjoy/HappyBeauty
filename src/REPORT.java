
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lady Ammon
 */
public class REPORT extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs= null;
    PreparedStatement pst=null;
    /**
     * Creates new form REPORT
     */
    public REPORT() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("pics/logo3.png")).getImage());
    }
    
    public static String now() {
       String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        return sdf.format(cal.getTime());
    }
    
    public static String nowToday() {
        
       String DATE_FORMAT_NOW = "yyyy-MM-dd";

    Calendar cal = Calendar.getInstance();
    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
    return sdf.format(cal.getTime());

  }
    
    public static String monthYear() {
        
       String DATE_FORMAT_NOW = "yyyy-MM";

    Calendar cal = Calendar.getInstance();
    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
    return sdf.format(cal.getTime());

  }
    
    public static String year() {
        
       String DATE_FORMAT_NOW = "yyyy";

    Calendar cal = Calendar.getInstance();
    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
    return sdf.format(cal.getTime());

  }
    
   public void tableResize(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15;
            for(int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width+1, width);
            }
            if(width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
   
    public void clear(){
        setDate1.setText("");
        setDate2.setText("");
        cmbChoose.setSelectedItem(null);
        cmbFilter.setSelectedItem(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbChoose = new javax.swing.JComboBox<>();
        cmbFilter = new javax.swing.JComboBox<>();
        setDate1 = new javax.swing.JTextField();
        calendar1 = new de.wannawork.jcalendar.JCalendarComboBox();
        setDate2 = new javax.swing.JTextField();
        calendar2 = new de.wannawork.jcalendar.JCalendarComboBox();
        generateR = new javax.swing.JLabel();
        printR = new javax.swing.JButton();
        SalesChartPanel = new javax.swing.JPanel();
        reportPane = new javax.swing.JScrollPane();
        reportTbl = new javax.swing.JTable();
        minimize = new javax.swing.JLabel();
        BACKlbl = new javax.swing.JLabel();
        reportbg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1350, 720));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setText("Report type:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 160, 30));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel2.setText("Filtered by:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 160, 30));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("(Please double click)");
        jLabel7.setToolTipText("");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 583, 300, -1));

        cmbChoose.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        cmbChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stock in", "Stock out", "Line graph" }));
        cmbChoose.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbChoosePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmbChoose, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 160, 40));

        cmbFilter.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        cmbFilter.setMaximumRowCount(6);
        cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily", "Monthly", "Yearly", "Specific date", "Date range" }));
        cmbFilter.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbFilterPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmbFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, 160, 40));

        setDate1.setEditable(false);
        setDate1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        setDate1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(setDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 300, 130, 40));

        calendar1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        calendar1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                calendar1StateChanged(evt);
            }
        });
        getContentPane().add(calendar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 130, 27));

        setDate2.setEditable(false);
        setDate2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        setDate2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(setDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 130, 40));

        calendar2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        calendar2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                calendar2StateChanged(evt);
            }
        });
        getContentPane().add(calendar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 450, 130, 27));

        generateR.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        generateR.setForeground(new java.awt.Color(255, 255, 255));
        generateR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        generateR.setText("GENERATE REPORT");
        generateR.setToolTipText("");
        generateR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generateRMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                generateRMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                generateRMouseExited(evt);
            }
        });
        getContentPane().add(generateR, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 542, 280, 60));

        printR.setBackground(new java.awt.Color(166, 190, 205));
        printR.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        printR.setText("PRINT");
        printR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printRMouseClicked(evt);
            }
        });
        getContentPane().add(printR, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 80, 120, 40));

        javax.swing.GroupLayout SalesChartPanelLayout = new javax.swing.GroupLayout(SalesChartPanel);
        SalesChartPanel.setLayout(SalesChartPanelLayout);
        SalesChartPanelLayout.setHorizontalGroup(
            SalesChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
        );
        SalesChartPanelLayout.setVerticalGroup(
            SalesChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        getContentPane().add(SalesChartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 160, 820, 440));

        reportPane.setBackground(new java.awt.Color(210, 156, 50));
        reportPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        reportTbl = new javax.swing.JTable(){
            public boolean isCellEditable (int rowIndex, int colIndex){
                return false;
            }
        };
        reportTbl.setBackground(new java.awt.Color(210, 156, 50));
        reportTbl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        reportTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        reportTbl.setSelectionBackground(new java.awt.Color(255, 255, 255));
        reportTbl.setSelectionForeground(new java.awt.Color(0, 0, 0));
        reportTbl.getTableHeader().setReorderingAllowed(false);
        reportPane.setViewportView(reportTbl);

        getContentPane().add(reportPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 900, 560));

        minimize.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        minimize.setForeground(new java.awt.Color(255, 255, 255));
        minimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minimize.setText("–");
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeMouseExited(evt);
            }
        });
        getContentPane().add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 10, 12, 20));

        BACKlbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BACKlbl.setForeground(new java.awt.Color(255, 255, 255));
        BACKlbl.setText("BACK");
        BACKlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BACKlblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BACKlblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BACKlblMouseExited(evt);
            }
        });
        getContentPane().add(BACKlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 60, 30));

        reportbg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/REPORTS_UI.PNG"))); // NOI18N
        reportbg.setText("jLabel1");
        reportbg.setMaximumSize(new java.awt.Dimension(1350, 720));
        reportbg.setMinimumSize(new java.awt.Dimension(1350, 720));
        reportbg.setPreferredSize(new java.awt.Dimension(1350, 720));
        getContentPane().add(reportbg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1350, 720));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BACKlblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BACKlblMouseClicked
        String stat = LOGIN.status;
            if(stat.equals("Stock-in user")) {
                this.dispose();
                USERMENU u= new USERMENU();
                u.setVisible(true);
            }
               
            else if(stat.equals("Stock-out user")) {
                this.dispose();
                USERMENU u= new USERMENU();
                u.setVisible(true);
            }

            else if (stat.equals("admin")){
                this.dispose();
                HOME h = new HOME();
                h.setVisible(true);
            }
    }//GEN-LAST:event_BACKlblMouseClicked

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        this.setState(REPORT.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void minimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseEntered
        minimize.setForeground(Color.decode("#d29c32"));
    }//GEN-LAST:event_minimizeMouseEntered

    private void minimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseExited
        minimize.setForeground(Color. white);
    }//GEN-LAST:event_minimizeMouseExited

    private void BACKlblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BACKlblMouseEntered
        BACKlbl.setForeground(Color.decode("#d29c32"));
    }//GEN-LAST:event_BACKlblMouseEntered

    private void BACKlblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BACKlblMouseExited
        BACKlbl.setForeground(Color. white);
    }//GEN-LAST:event_BACKlblMouseExited

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        conn=mysqlconnect.ConnectDb();
        clear();
        jLabel7.setVisible(false);
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
        printR.setVisible(false);
        reportPane.setVisible(false);
        SalesChartPanel.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void calendar1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_calendar1StateChanged
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");

        String format=sdf.format(calendar1.getDate());
        setDate1.setVisible(true);
        setDate1.setText(format);
    }//GEN-LAST:event_calendar1StateChanged

    private void calendar2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_calendar2StateChanged
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");

        String format=sdf.format(calendar2.getDate());
        setDate2.setVisible(true);
        setDate2.setText(format);
    }//GEN-LAST:event_calendar2StateChanged

    private void printRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printRMouseClicked
    
    String choose=cmbChoose.getSelectedItem().toString();
    String date= ""+ nowToday();
    String datemy= ""+ monthYear();
    String yy= ""+ year();
    
    if(choose.equals("All products"))
    {
        try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/allProducts.jrxml"));
                String sql="Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(released_by.qty_out), CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity in', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product LEFT OUTER JOIN released_by ON product.p_barcode=released_by.Rbarcode LEFT OUTER JOIN added_by ON released_by.Rbarcode=added_by.Abarcode where date_out!='0' AND date_in!='0' AND date_in LIKE '"+datemy+"%' AND date_out LIKE '"+datemy+"%' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            } 
    }
    String filter=cmbFilter.getSelectedItem().toString();
    if(filter.equals("Daily")){
        if(choose.equals("Stock in"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/dailyStockIn.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(added_by.qty_in), c_stock AS 'Stock', (p_cost*(SUM(added_by.qty_in))), date_in from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in='"+date+"' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }   
            //clear();
        }
        else if(choose.equals("Stock out"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/dailyStockOut.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(released_by.qty_out), c_stock AS 'Stock', (p_cost*(SUM(released_by.qty_out))), date_out from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out='"+date+"' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    if(filter.equals("Monthly")){
        if(choose.equals("Stock in"))
        {
            try
            {   
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/monthlyStockIn.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(added_by.qty_in), c_stock AS 'Stock', (p_cost*(SUM(added_by.qty_in))), date_in from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in LIKE '"+datemy+"%' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                   JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/monthlyStockOut.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(released_by.qty_out), c_stock AS 'Stock', (p_cost*(SUM(released_by.qty_out))), date_out from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+datemy+"%' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }   
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }    
    }
    
    if(filter.equals("Yearly")){
        if(choose.equals("Stock in"))
        {
            try
            {   
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/yearlyStockIn.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(added_by.qty_in), c_stock AS 'Stock', (p_cost*(SUM(added_by.qty_in))), date_in from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in LIKE '"+yy+"%' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                   JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/yearlyStockOut.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(released_by.qty_out), c_stock AS 'Stock', (p_cost*(SUM(released_by.qty_out))), date_out from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+yy+"%' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }   
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        } 
    }
    
    if(filter.equals("Specific date")){
        if(choose.equals("Stock in"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/specificDateStockIn.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(added_by.qty_in), c_stock AS 'Stock', (p_cost*(SUM(added_by.qty_in))), date_in from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in='"+setDate1.getText()+"' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }   
            //clear();
        }
        else if(choose.equals("Stock out"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/specificDateStockOut.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(released_by.qty_out), c_stock AS 'Stock', (p_cost*(SUM(released_by.qty_out))), date_out from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out='"+setDate1.getText()+"' group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    if(filter.equals("Date range")){
       if(choose.equals("Stock in"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/dateRangeStockIn.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(added_by.qty_in), c_stock AS 'Stock', (p_cost*(SUM(added_by.qty_in))), date_in from product JOIN added_by ON product.p_barcode=added_by.Abarcode where ((date_in!='0') AND (date_in BETWEEN '"+setDate1.getText()+"' AND '"+setDate2.getText()+"')) group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }   
            //clear();
        }
        else if(choose.equals("Stock out"))
        {
            try
            {
                JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/report/dateRangeStockOut.jrxml"));
                String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', SUM(released_by.qty_out), c_stock AS 'Stock', (p_cost*(SUM(released_by.qty_out))), date_out from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where ((date_out!='0') AND (date_out BETWEEN '"+setDate1.getText()+"' AND '"+setDate2.getText()+"')) group by p_name";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jasperDesign.setQuery(newQuery);
                net.sf.jasperreports.engine.JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);//.compileReport(jasperDesign);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, conn);
                if(jasperPrint.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(null, "No documents found");
                }
                else {
                    JasperViewer.viewReport(jasperPrint, false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        } 
    }
    }//GEN-LAST:event_printRMouseClicked

    private void cmbFilterPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbFilterPopupMenuWillBecomeInvisible
    String filter=cmbFilter.getSelectedItem().toString();
    
    if(filter.equals("Daily")){
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
    }
    
    if(filter.equals("Monthly")){
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
    }
    
    if(filter.equals("Yearly")){
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
    }
    
    if(filter.equals("Specific date")){
        setDate1.setText("");
        setDate1.setVisible(true);
        calendar1.setVisible(true);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
    }
    
    if(filter.equals("Date range")){
        setDate1.setText("");
        setDate2.setText("");
        setDate1.setVisible(true);
        calendar1.setVisible(true);
        setDate2.setVisible(true);
        calendar2.setVisible(true);
    }
    }//GEN-LAST:event_cmbFilterPopupMenuWillBecomeInvisible

    private void generateRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateRMouseClicked
    String choose=cmbChoose.getSelectedItem().toString();
    String date= ""+ nowToday();
    String datemy= ""+ monthYear();
    String yy= ""+ year();
    
    if(choose.equals("All products"))
    {
       //String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity out', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity in', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product LEFT OUTER JOIN released_by ON product.p_barcode=released_by.Rbarcode LEFT OUTER JOIN added_by ON released_by.Rbarcode=added_by.Abarcode where date_out!='0' AND date_in!='0' AND date_in LIKE '"+datemy+"%' AND date_out LIKE '"+datemy+"%' group by p_name";
       
       String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity out', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost' from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+datemy+"%' group by p_name UNION Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity in', c_stock AS 'Stock', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in LIKE '"+datemy+"%'";
        try{
            pst= conn.prepareStatement(sql);
            rs=pst.executeQuery();
            printR.setVisible(true);
            reportPane.setVisible(true);
            reportTbl.setVisible(true);
            reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
            tableResize(reportTbl);
            
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    String filter=cmbFilter.getSelectedItem().toString();
    if(filter.equals("Daily")){
       if(choose.equals("Stock in"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in='"+date+"' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost' from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out='"+date+"' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        } 
    }
    
    if(filter.equals("Monthly")){
        if(choose.equals("Stock in"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in LIKE '"+datemy+"%' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost' from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+datemy+"%' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    if(filter.equals("Yearly")){
        if(choose.equals("Stock in"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in LIKE '"+yy+"%' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost' from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+yy+"%' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    if(filter.equals("Specific date")){
        if(choose.equals("Stock in"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product JOIN added_by ON product.p_barcode=added_by.Abarcode where date_in!='0' AND date_in='"+setDate1.getText()+"' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost' from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out='"+setDate1.getText()+"' group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    if(filter.equals("Date range")){
        if(choose.equals("Stock in"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(added_by.qty_in) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(added_by.qty_in) AS DECIMAL)) AS 'Stock in Cost' from product JOIN added_by ON product.p_barcode=added_by.Abarcode where ((date_in!='0') AND (date_in BETWEEN '"+setDate1.getText()+"' AND '"+setDate2.getText()+"')) group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else if(choose.equals("Stock out"))
        {
            String sql = "Select p_name AS 'Product name', p_brand AS 'Brand', p_cost AS 'Cost', CAST(SUM(released_by.qty_out) AS DECIMAL) AS 'Quantity', c_stock AS 'Stock', (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) AS 'Stock out Cost' from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where ((date_out!='0') AND (date_out BETWEEN '"+setDate1.getText()+"' AND '"+setDate2.getText()+"')) group by p_name";
            try{
                pst= conn.prepareStatement(sql);
                rs=pst.executeQuery();
                printR.setVisible(true);
                reportPane.setVisible(true);
                reportTbl.setVisible(true);
                reportTbl.setModel(DbUtils.resultSetToTableModel(rs));
                tableResize(reportTbl);
            
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    }//GEN-LAST:event_generateRMouseClicked

    private void generateRMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateRMouseEntered
        generateR.setForeground(Color.decode("#d29c32"));
        jLabel7.setVisible(true);
    }//GEN-LAST:event_generateRMouseEntered

    private void generateRMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateRMouseExited
       generateR.setForeground(Color. white);
       jLabel7.setVisible(false);
    }//GEN-LAST:event_generateRMouseExited

    private void cmbChoosePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbChoosePopupMenuWillBecomeInvisible
     String choose=cmbChoose.getSelectedItem().toString();   
     String datemy= ""+ monthYear();
    if(choose.equals("Line graph"))
    {
        jLabel2.setVisible(false);
        cmbFilter.setVisible(false);
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
        printR.setVisible(false);
        reportPane.setVisible(false);
        
        String date=now();
        String datestr[]=date.split("-");
        String year= datestr[0];
        String monthspec=datestr[1];
      String month1="";
      switch(monthspec)
                {
                    case "01": month1 = "January"; break;
                    case "02": month1 = "February"; break;
                    case "03": month1 = "March"; break;
                    case "04": month1 = "April"; break;
                    case "05": month1 = "May"; break;
                    case "06": month1 = "June"; break;
                    case "07": month1 = "July"; break;
                    case "08": month1 = "August"; break;
                    case "09": month1 = "September"; break;
                    case "10": month1 = "October"; break;
                    case "11": month1 = "November"; break;
                    case "12": month1 = "December"; break;
                }
        
        String sql = "Select EXTRACT(DAY FROM released_by.date_out) AS DayDate, (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)),EXTRACT(MONTH FROM released_by.date_out) AS MonthName from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+datemy+"%' GROUP BY DayDate,MonthName ORDER BY DayDate,p_name";
        //String sql = "Select released_by.date_out, (p_cost*CAST(SUM(released_by.qty_out) AS DECIMAL)) from product JOIN released_by ON product.p_barcode=released_by.Rbarcode where date_out!='0' AND date_out LIKE '"+datemy+"%' group by p_name";
        //sql = "select  EXTRACT(DAY FROM S_DATE_RECORDED) AS DayDate, SUM(Sale_Amount),EXTRACT(MONTH FROM S_DATE_RECORDED) AS MonthName from Sale where Status = 'ACTIVE' and Year='"+year+"' and Month='"+month1+"' GROUP BY DayDate ,monthName,year ORDER BY DayDate";
        try{
        pst= conn.prepareStatement(sql);
        rs=pst.executeQuery();
        
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        while(rs.next()){ 
            dataset.setValue(Float.parseFloat(rs.getString(2)),"sale",rs.getString(1));
        }
       
        JFreeChart chart=ChartFactory.createLineChart3D("Monthly Sale",month1,"Amount", dataset,PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.WHITE);
        CategoryPlot P=chart.getCategoryPlot();
        P.setRangeGridlinePaint(Color.BLACK);
     
        SalesChartPanel.setVisible(true);
        SalesChartPanel.setLayout(new java.awt.BorderLayout());
        ChartPanel CP = new ChartPanel(chart);
        SalesChartPanel.add(CP,BorderLayout.CENTER);
        SalesChartPanel.validate();
        
        
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }    
    if(choose.equals("All products"))
    {
        jLabel2.setVisible(false);
        cmbFilter.setVisible(false);
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
        SalesChartPanel.setVisible(false);
    }
    if(choose.equals("Stock in"))
    {
        jLabel2.setVisible(true);
        cmbFilter.setVisible(true);
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
        SalesChartPanel.setVisible(false);
    }
    if(choose.equals("Stock out"))
    {
        jLabel2.setVisible(true);
        cmbFilter.setVisible(true);
        setDate1.setVisible(false);
        calendar1.setVisible(false);
        setDate2.setVisible(false);
        calendar2.setVisible(false);
        SalesChartPanel.setVisible(false);
    }
    }//GEN-LAST:event_cmbChoosePopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new REPORT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BACKlbl;
    private javax.swing.JPanel SalesChartPanel;
    private de.wannawork.jcalendar.JCalendarComboBox calendar1;
    private de.wannawork.jcalendar.JCalendarComboBox calendar2;
    private javax.swing.JComboBox<String> cmbChoose;
    private javax.swing.JComboBox<String> cmbFilter;
    private javax.swing.JLabel generateR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel minimize;
    private javax.swing.JButton printR;
    private javax.swing.JScrollPane reportPane;
    private javax.swing.JTable reportTbl;
    private javax.swing.JLabel reportbg;
    public javax.swing.JTextField setDate1;
    public javax.swing.JTextField setDate2;
    // End of variables declaration//GEN-END:variables
}
